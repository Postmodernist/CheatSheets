
# Remove intentions lightbulb in Android Studio

    ~/.AndroidStudio3.0/config/options/editor.xml
        <option name="SHOW_INTENTION_BULB" value="false" />


# Switch between activities w/o recreating and finishing

    AndroidManifest.xml
        <activity android:launchMode="singleInstance">


# Convert DPs to pixels

    private int dpToPx(float dps) {
        return (int) (dps * getResources().getDisplayMetrics().density + 0.5f);
    }


# Key app components to know
    
    - Activity
    - Service
    - Broadcast Receiver
    - Content Provider


# Plug/unplug battery charger on emulator. Skip "-s <device_name>" if only one device is connected

    $ adb -s emulator-5554 shell dumpsys battery unplug
    $ adb -s emulator-5554 shell dumpsys battery reset

# Useful Android Studio hotkeys

    Alt + F12       Open terminal
    Ctrl + F12      Open module structure window

# Bitmap utils

  /** Convert bitmap to byte array */
  private byte[] bitmapToBytes(Bitmap bitmap) {
    byte[] res = null;
    try (ByteArrayOutputStream stream = new ByteArrayOutputStream()) {
      bitmap.compress(Bitmap.CompressFormat.PNG, 0, stream);
      res = stream.toByteArray();
    } catch (IOException e) {
      Log.e(TAG, "IOException: " + e.getMessage());
    }
    return res;
  }

  /** Convert byte array to bitmap */
  private Bitmap bytesToBitmap(byte[] bytes) {
    return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
  }

# Screen orientation

    Activity.getResources().getConfiguration().orientation
    
# Rx cache last emitted item
    Observable.replay(1).autoConnect() or Observable.replay(1).refCount
    
# Get frame from video URL

  private static Bitmap getFrameFromVideoUrl(String videoUrl) {
    MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
    mediaMetadataRetriever.setDataSource(videoUrl, new HashMap<>());
    Bitmap frame = mediaMetadataRetriever.getFrameAtTime(1, OPTION_CLOSEST);
    mediaMetadataRetriever.release();
    return frame;
  }

# Vector drawable <--> SVG

# Vector Drawable

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportHeight="24"
    android:viewportWidth="24">

    <path
        android:fillColor="#ffffff"
        android:pathData="M12,3L2,12h3v8h2.5v-0.8c0-1.5,3-2.2,4.5-2.2s4.5,0.8,4.5,2.2V20H19v-8h3L12,3zM12,15.2c1.2,0-2.2-1-2.2-2.2 s1-2.2,2.2-2.2s2.2,1,2.2,2.2S13.2,15.2,12,15.2z" />
    <path android:pathData="M0,0h24v24H0V0z" />
</vector>

# SVG

<svg xmlns="http://www.w3.org/2000/svg"
    width="24" 
    height="24" 
    viewBox="0 0 24 24" >

    <path 
        fill="#ffffff"
        d="M12,3L2,12h3v8h2.5v-0.8c0-1.5,3-2.2,4.5-2.2s4.5,0.8,4.5,2.2V20H19v8h3L12,3zM12,15.2c1.2,0-2.2-1-2.2-2.2 s1-2.2,2.2-2.2s2.2,1,2.2,2.2S13.2,15.2,12,15.2z" />
    <path d="M0,0h24v24H0V0z" fill="none"/>
</svg>

# Android Studio logcat inverted filtering: create new filter and add the following to the TAG field

^(?!(zygote|OpenGLRenderer|EGL_emulation|InstantRun))

# Kotlin live template: logm $content$

groovyScript("def params = _2.collect {it + ' = [ $' + it + ' ]'}.join(', '); return '\"' + _1 + '() called' + (params.empty ? '' : ' with: ' + params) + '\"'", kotlinFunctionName(), functionParameters())
